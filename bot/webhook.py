import asyncio
import logging
from aiohttp import web
from aiogram import Bot, Dispatcher

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InlineQueryResultVideo, FSInputFile
from urllib.parse import quote_plus
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from pathlib import Path

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
from config import (
    BOT_TOKEN,
    WEBHOOK_HOST,
    WEBHOOK_PATH,
    WEBAPP_HOST,
    WEBAPP_PORT,
)
from handlers import start, common
from utils.telemost import TelemostClient

# üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∏ webhook –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ (–∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}" if WEBHOOK_HOST else ""

# üíæ –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
prepared_messages = {}

# üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


async def create_prepared_message_for_user(user_id: int, bot: Bot, video_call_url: str = ""):
    """–°–æ–∑–¥–∞–µ—Ç —à–∞–±–ª–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –°–æ–∑–¥–∞–µ–º inline-—Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —à–∞–±–ª–æ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º

        share_text = quote_plus(f"üëã Join my video call!")
        share_url = f"https://t.me/share/url?text={share_text}&url={quote_plus(video_call_url)}"
        keyboard_rows = InlineKeyboardMarkup(
            inline_keyboard=[
                [ InlineKeyboardButton(text="‚ñ∂Ô∏è Open Call", url=video_call_url),],
                [ InlineKeyboardButton(text="‚ûï Invite Friends", url=share_url),],
            ]
        )

        text=(f"‚úÖ Join my video  <a href='{video_call_url}'>call!</a>\n")
    
        
        video_url = f"https://tlemst.ru/bot/telemost/app/friends.mp4"
        thumbnail_url = f"https://tlemst.ru/bot/telemost/app/assets/friends-thumb.jpg"  # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–≤—å—é

        inline_result = InlineQueryResultVideo(
            id=f"video_call_invitation_{user_id}",
            video_url=video_url,  # –ü—É–±–ª–∏—á–Ω—ã–π URL (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
            thumbnail_url=thumbnail_url,  # –ü—Ä–µ–≤—å—é URL (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
            mime_type="video/mp4",
            title="üé• Video Call Invitation",
            caption=text,
            parse_mode="HTML",
            reply_markup=keyboard_rows,
            video_width=640,  # –£–∫–∞–∂–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –≤–∞—à–µ–≥–æ –≤–∏–¥–µ–æ
            video_height=480,
            video_duration=10,  # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        )
        print(1)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await bot.save_prepared_inline_message(
            user_id=user_id,
            result=inline_result,
            allow_user_chats=True,
            allow_group_chats=True,
 
        )
        
        prepared_messages[user_id] = result.id
        logger.info(f"[OK] –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å ID: {result.id}")
        return result.id
        
    except Exception as e:
        logger.error(f"[ERROR] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return None


async def on_startup(bot: Bot) -> None:
    """
    üöÄ –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–£–°–ö–ê WEBHOOK
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç webhook URL –≤ Telegram –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    """
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ö–æ—Å—Ç
        if not WEBHOOK_URL:
            raise ValueError("WEBHOOK_HOST not set. Specify WEBHOOK_HOST in .env")

        await bot.set_webhook(
            url=WEBHOOK_URL,
            drop_pending_updates=True,
            allowed_updates=["message", "callback_query" ]
        )
        # Webhook set successfully
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        me = await bot.get_me()
        # Bot started successfully
        
    except Exception as e:
        # –ù–µ –ø–∞–¥–∞–µ–º –ø—Ä–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ DNS/–¥–æ–º–µ–Ω–∞; –ø—Ä–æ–±—É–µ–º –ø–æ–∑–∂–µ –≤ —Ñ–æ–Ω–µ
        logger.error(f"‚ùå Error setting webhook: {e}. Background retry will be performed")
        async def _retry_set_webhook() -> None:
            backoffs_seconds = [30, 60, 120, 300, 600]
            for delay in backoffs_seconds:
                try:
                    await asyncio.sleep(delay)
                    await bot.set_webhook(
                        url=WEBHOOK_URL,
                        drop_pending_updates=True,
                        allowed_updates=["message", "callback_query", "inline_query"]
                    )
                    me = await bot.get_me()
                    # Webhook set after retry
                    return
                except Exception as retry_err:
                    logger.warning(f"üîÅ Failed to set webhook (waiting {delay}s): {retry_err}")
            logger.error("‚õî Exhausted webhook retry attempts. Try manually later.")
        asyncio.create_task(_retry_set_webhook())


async def on_shutdown(bot: Bot) -> None:
    """
    üõë –§–£–ù–ö–¶–ò–Ø –û–°–¢–ê–ù–û–í–ö–ò WEBHOOK
    
    –£–¥–∞–ª—è–µ—Ç webhook –∏–∑ Telegram –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    """
    try:
        await bot.delete_webhook()
        # Webhook removed
    except Exception as e:
        logger.error(f"‚ùå Error removing webhook: {e}")


async def health_check(request):
    """
    üè• HEALTH CHECK ENDPOINT
    
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.
    """
    return web.json_response({
        "status": "ok",
        "service": "telegram-bot",
        "version": "1.0.0"
    })


def create_app() -> web.Application:
    """
    üèóÔ∏è –°–û–ó–î–ê–ù–ò–ï WEB-–ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
    
    –°–æ–∑–¥–∞–µ—Ç aiohttp –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook –∑–∞–ø—Ä–æ—Å–æ–≤.
    
    Returns:
        web.Application: –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    """
    # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
    bot = Bot(
        token=BOT_TOKEN,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML)
    )
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    dp = Dispatcher()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã
    dp.include_router(start.router)
    dp.include_router(common.router)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–ø—É—Å–∫–∞/–æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    
    # –°–æ–∑–¥–∞–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = web.Application()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook handler
    SimpleRequestHandler(
        dispatcher=dp,
        bot=bot
    ).register(app, path=WEBHOOK_PATH)
    
    # –î–æ–±–∞–≤–ª—è–µ–º health check
    app.router.add_get("/health", health_check)
    
    # –†–∞–∑–¥–∞—á–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
    assets_path = Path(__file__).parent / "assets"
    app.router.add_static("/assets/", assets_path, name="assets")

    # API: —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏ Telemost
    async def api_create_telemost(request: web.Request) -> web.Response:
        try:
            # –ß–∏—Ç–∞–µ–º user_id –∏–∑ JSON —Ç–µ–ª–∞ (–ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –∏–∑ Mini App)
            try:
                payload = await request.json()
            except Exception:
                payload = {}
            user_id = payload.get("user_id")

            client = TelemostClient()
            url = await client.create_conference(title="Meeting without confirmation")
            if not url:
                logger.error("‚ùå Telemost did not return meeting URL")
                return web.json_response({"ok": False, "error": "create_failed"}, status=500)

            # –ï—Å–ª–∏ –∑–Ω–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–æ–¥—É–±–ª–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
            if user_id:
                try:
         
                    share_text = quote_plus(f"üëã Join my video call!")
                    share_url = f"https://t.me/share/url?text={share_text}&url={quote_plus(url)}"
                    keyboard_inline = InlineKeyboardMarkup(
                        inline_keyboard=[[
                            InlineKeyboardButton(text="‚ñ∂Ô∏è Open Call", url=url),],[
                            InlineKeyboardButton(text="‚ûï Invite Friends", url=share_url),
                        ]]
                    )
                    video_path = Path(__file__).parent / "assets" / "call.mp4"
                    logger.info(f"Video path: {video_path}")
                    text=(
                            f"‚úÖ Your video call is <a href='{url}'>ready!</a>\n"
                            f"üì¢ <a href='{share_url}'>Invite your</a> friends to join.\n"
                    )
          

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∏–¥–µ–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –ø—É—Å—Ç–æ–µ
                    if video_path.exists() and video_path.stat().st_size > 0:
                        try:
                            await bot.send_video(
                                chat_id=int(user_id),
                                video=FSInputFile(video_path),
                                caption=text,
                                supports_streaming=True,
                                reply_markup=keyboard_inline,
                                parse_mode=ParseMode.HTML,
    
                            )
                        except Exception as video_err:
                            logger.warning("Failed to send video, fallback to text: %s", video_err)
                            # Fallback –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            await bot.send_message(
                                chat_id=int(user_id),
                                text=text,
                                reply_markup=keyboard_inline,
                                parse_mode=ParseMode.HTML,
                                disable_web_page_preview=True,
                            )
                    else:
                        logger.warning("Video not found, sending text message")
                        await bot.send_message(
                            chat_id=int(user_id),
                            text=text,
                            reply_markup=keyboard_inline,
                            parse_mode=ParseMode.HTML,
                            disable_web_page_preview=True,
                        )
                except Exception as send_err:
                    logger.warning("Failed to send message to user %s: %s", user_id, send_err)

            return web.json_response({"ok": True, "url": url})
        except Exception as e:
            logger.error(f"‚ùå API error /api/telemost/create: {e}")
            return web.json_response({"ok": False, "error": str(e)}, status=500)

    app.router.add_post("/api/telemost/create", api_create_telemost)

    # API: –ø–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    async def api_get_prepared_message_id(request: web.Request) -> web.Response:
        """API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            user_id = request.query.get("user_id")
            
            if not user_id:
                return web.json_response({"ok": False, "error": "User ID is required"}, status=400)
            
            try:
                user_id = int(user_id)
            except ValueError:
                return web.json_response({"ok": False, "error": "Invalid user ID format"}, status=400)
            
            # –ü–æ–ª—É—á–∞–µ–º video_call_url –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            video_call_url = request.query.get("video_call_url", "")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∂–¥—ã–π —Ä–∞–∑
            message_id = await create_prepared_message_for_user(user_id, bot, video_call_url)
            if not message_id:
                return web.json_response({"ok": False, "error": "Failed to create prepared message"}, status=500)

            logger.info(f"[DEBUG] Prepared message ID for user {user_id}: {message_id}")

            return web.json_response({
                "ok": True,
                "id": message_id,
                "status": "ready"
            })
            
        except Exception as e:
            logger.error(f"‚ùå API error /api/prepared-message-id: {e}")
            return web.json_response({"ok": False, "error": str(e)}, status=500)

    app.router.add_get("/api/prepared-message-id", api_get_prepared_message_id)
    
    setup_application(app, dp, bot=bot)
    
    return app


def main():
    app = create_app()
    if WEBHOOK_URL:
        pass
    
    web.run_app(
        app,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT,
        access_log=logger
    )


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        # Webhook server stopped
        pass
    except Exception as e:
        logger.error(f"üí• Critical error: {e}")
        raise
