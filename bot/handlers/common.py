"""

–ö–û–ú–ê–ù–î–´:
/call - –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –º–æ–¥—É–ª—è:
- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç InlineKeyboardMarkup –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
- HTML-—Ä–∞–∑–º–µ—Ç–∫–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
- –ú–æ–¥—É–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å Router –¥–ª—è –ª–µ–≥–∫–æ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è

–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏:
- –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ (async/await)
- –¢–∏–ø–∏–∑–∞—Ü–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º aiogram.types
- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""
from aiogram import Router, F
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    InputTextMessageContent,
    FSInputFile,
)
from aiogram.filters import Command
import json
from utils.telemost import TelemostClient
from config import BASE_URL, APP_URL
from urllib.parse import quote_plus


from pathlib import Path

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—â–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
router = Router()


async def send_video_call_message(message: Message):
    """
      
    –°–æ–∑–¥–∞–µ—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –∫–æ–º–Ω–∞—Ç—É —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏.
    –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ InlineKeyboard –≤ Telegram –±–æ—Ç–µ.
    
    Args:
        message (Message): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç
        
    –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
    - –°–æ–∑–¥–∞–µ—Ç InlineKeyboardMarkup —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏
    - –ö–Ω–æ–ø–∫–∞ "–ü–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ" –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç URL
    - –ö—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —Å–æ–∑–¥–∞–Ω–∏—è
    
    –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:
    - üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è - –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º –≤ —á–∞—Ç
    - üîó –ü–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ - –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –≤–Ω–µ—à–Ω—é—é —Å—Å—ã–ª–∫—É
    """

    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¢–µ–ª–µ–º–æ—Å—Ç–∞
    telemost_url = None
    try:
        client = TelemostClient()
        telemost_url = await client.create_conference(title="Telemost Meeting")
    except Exception:
        telemost_url = None

    # –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ
    if not telemost_url:
        await message.answer(
            "üîß <b>Telemost is not configured</b>\n\n"
            "To create video calls, you need to set up integration with Yandex 360:\n\n"
            "1Ô∏è‚É£ <b>Authorization:</b>\n"
            "‚Ä¢ Use the /telemost_auth command to get the authorization link\n"
            "‚Ä¢ Follow the link and grant access\n\n"
            "2Ô∏è‚É£ <b>Enter code:</b>\n"
            "‚Ä¢ Copy the 'code' parameter from the address bar\n"
            "‚Ä¢ Send the command: /telemost_code CODE\n\n"
            "3Ô∏è‚É£ <b>Verification:</b>\n"
            "‚Ä¢ After setup, the /call command will create real meetings\n\n"
            "üí° <i>Contact the administrator to get OAuth settings</i>",
            parse_mode="HTML"
        )
        return

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≤—Å—Ç—Ä–µ—á—É
    video_call_url = telemost_url

    share_text = quote_plus(f"üëã Join my video call!")
    share_url = f"https://t.me/share/url?text={share_text}&url={quote_plus(video_call_url)}"

    keyboard_inline = InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(text="‚ñ∂Ô∏è Open Call", url=video_call_url),],[
            InlineKeyboardButton(text="‚ûï Invite Friends", url=share_url),
        ]]
    )

    
    video_call_text = (
        f"‚úÖ Your video call is <a href='{video_call_url}'>ready!</a>\n"
        f"üì¢ <a href='{share_url}'>Invite your</a> friends to join.\n"
    )
    
    video_path = Path(__file__).parent.parent / "assets" / "call.mp4"
    try:
        if video_path.exists() and video_path.stat().st_size > 0:
            await message.answer_video(
                video=FSInputFile(video_path),
                caption=video_call_text,
                supports_streaming=True,
                reply_markup=keyboard_inline,
                parse_mode="HTML",
            )
        else:
            raise FileNotFoundError("Video file not found or empty")
    except Exception:
        # Fallback –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(
            video_call_text,
            reply_markup=keyboard_inline,
            parse_mode="HTML",
        )




@router.message(Command("call"))
async def cmd_call(message: Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ /call ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–æ–º–Ω–∞—Ç—ã
    """
    await send_video_call_message(message)




@router.message(F.web_app_data)
async def handle_web_app_data(message: Message):
    """
    üì± –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–ê–ù–ù–´–• –û–¢ MINI APP
    
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∏–∑ Telegram Mini App.
    –ü–æ–∑–≤–æ–ª—è–µ—Ç Mini App –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –±–æ—Ç–æ–º –Ω–∞–ø—Ä—è–º—É—é.
    
    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç Mini App
        
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫–æ–º–∞–Ω–¥—ã:
    - video call: —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞
    """
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Mini App
        data = json.loads(message.web_app_data.data)
        command = data.get('command', '').lower()
        action = data.get('action', '')
        
        # –†–µ–∞–∫—Ü–∏—è –Ω–∞ —Å—Ç–∞—Ä—Ç Mini App
        if action == 'app_started':
            await message.answer('‚úÖ –í–∞—à–µ Mini App –∑–∞–ø—É—â–µ–Ω–æ')
            return

        if action == 'video_call_created':
            # –ü—Ä–∏–ª–µ—Ç–µ–ª–∞ —Å—Å—ã–ª–∫–∞ –∫–æ–º–Ω–∞—Ç—ã –∏–∑ Mini App ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
            video_call_url = data.get('url')
            if video_call_url:
                # deep link –≤ –¥—Ä—É–≥–æ–π Mini App –æ—Ç–∫–ª—é—á–µ–Ω
                deep_link_other = None

                app_base = (APP_URL or f"{BASE_URL}/app").rstrip('/')
                share_page_url = f"{app_base}/index.html?url={quote_plus(video_call_url)}"

                kb_rows = [[ 
                    InlineKeyboardButton(text="üîó Video call link (VKS)", url=video_call_url),
                    InlineKeyboardButton(text="üì§ Share", url=share_page_url)
                ]]
                if deep_link_other:
                    kb_rows.append([
                        InlineKeyboardButton(text="üß© Open in another Mini App", url=deep_link_other)
                    ])

                keyboard_inline = InlineKeyboardMarkup(inline_keyboard=kb_rows)
                await message.answer(
                    (
                        "üè† <b>Your room has been created!</b>\n\n"
                        f"üîó Link: {room_url}\n"
                        "üë• Invite friends or open the VKS link\n\n"
                        "‚ú® Choose an action:"
                    ),
                    reply_markup=keyboard_inline,
                    parse_mode="HTML",
                )
                return


        if action == 'send_command':
            # –£–±–∏—Ä–∞–µ–º —Å–ª—ç—à –∏–∑ –∫–æ–º–∞–Ω–¥—ã –µ—Å–ª–∏ –µ—Å—Ç—å
            command = command.lstrip('/')
            
            if command == 'call':
                await send_video_call_message(message)
            else:
                await message.answer(
                    f"‚ùå Unknown command: {command}\n\n"
                    "Available commands:\n"
                    "‚Ä¢ /call - create video call"
                )
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Mini App
            await message.answer(
                "üì± Data from Mini App received!\n\n"
                f"üîç Action type: {action}\n"
                f"üìä Data: {command}"
            )
            
    except json.JSONDecodeError as e:
        await message.answer(
            "‚ùå Error processing data from Mini App\n"
            "Check the format of the data being sent"
        )
    except Exception as e:
        await message.answer(
            "‚ùå An error occurred while processing the request from Mini App"
        )


