import { Section, List, ButtonCell } from '@telegram-apps/telegram-ui';
import { postEvent } from '@telegram-apps/sdk';
import { initDataState, useSignal } from '@telegram-apps/sdk-react';
import type { FC } from 'react';
import { useState, useEffect } from 'react';

import { Page } from '@/components/Page.tsx';

export const SendMessagePage: FC = () => {
  const [isLoading, setIsLoading] = useState(false);
  const [preparedMessageId, setPreparedMessageId] = useState<string | null>(null);
  const [isReady, setIsReady] = useState(false);
  const [debugInfo, setDebugInfo] = useState<any>({});
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º initDataState –∫–∞–∫ –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º —à–∞–±–ª–æ–Ω–µ
  const initData = useSignal(initDataState);
  
  // –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ initDataState (–∫–∞–∫ –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º —à–∞–±–ª–æ–Ω–µ)
  const user_id = initData?.user?.id || null;
  
  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  console.log('=== DEBUG INFO ===');
  console.log('initData:', initData);
  console.log('initData.user:', initData?.user);
  console.log('user_id from initData:', user_id);
  console.log('==================');

  // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  useEffect(() => {
    setDebugInfo({
      initData: initData,
      user: initData?.user,
      user_id: user_id,
      hasUser: !!initData?.user,
    });
  }, [initData, user_id]);

  // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  useEffect(() => {
    const fetchPreparedMessageId = async () => {
      // Fallback –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π user_id
      const testUserId = user_id || 12345; // –í—Ä–µ–º–µ–Ω–Ω—ã–π ID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      
      if (!user_id) {
        console.warn('User ID not available, using test ID:', testUserId);
      }

      try {
        console.log('Fetching prepared message ID for user:', testUserId);
        const response = await fetch(`/api/prepared-message-id?user_id=${testUserId}`);
        console.log('Response status:', response.status);
        const data = await response.json();
        console.log('Response data:', data);
        setPreparedMessageId(data.id);
        setIsReady(true);
        console.log('Prepared message ID:', data.id);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        setIsReady(false);
      }
    };

    fetchPreparedMessageId();
  }, [user_id]);

  const sendPreparedMessage = async () => {
    if (!preparedMessageId) {
      alert('–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –≥–æ—Ç–æ–≤–æ');
      return;
    }

    setIsLoading(true);
    try {
      console.log('Sending prepared message with ID:', preparedMessageId);
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º ID
      await postEvent('web_app_send_prepared_message', {
        id: preparedMessageId
      });
      console.log('Prepared message sent successfully');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      alert('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Page>
      <List>
        <Section
          header="–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"
          footer={isReady ? "–ì–æ—Ç–æ–≤–æ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ" : "–ó–∞–≥—Ä—É–∑–∫–∞..."}
        >
          <ButtonCell
            title={
              isLoading 
                ? "–û—Ç–ø—Ä–∞–≤–∫–∞..." 
                : isReady 
                  ? "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ" 
                  : "–ó–∞–≥—Ä—É–∑–∫–∞..."
            }
            onClick={sendPreparedMessage}
            disabled={isLoading || !isReady}
          />
        </Section>
        
        <Section header="üîç –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è">
          <ButtonCell
            title={`User ID: ${user_id || '–ù–µ –Ω–∞–π–¥–µ–Ω'}`}
            onClick={() => console.log('User ID clicked:', user_id)}
          />
          <ButtonCell
            title={`InitData: ${initData ? '–î–æ—Å—Ç—É–ø–µ–Ω' : '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}`}
            onClick={() => console.log('InitData clicked:', initData)}
          />
          <ButtonCell
            title={`User: ${initData?.user ? '–î–æ—Å—Ç—É–ø–µ–Ω' : '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}`}
            onClick={() => console.log('User clicked:', initData?.user)}
          />
          <ButtonCell
            title={`Prepared ID: ${preparedMessageId || '–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω'}`}
            onClick={() => console.log('Prepared ID clicked:', preparedMessageId)}
          />
          <ButtonCell
            title={`Ready: ${isReady ? '–î–∞' : '–ù–µ—Ç'}`}
            onClick={() => console.log('Ready clicked:', isReady)}
          />
        </Section>

        <Section header="üìä –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞">
          <ButtonCell
            title="–ü–æ–∫–∞–∑–∞—Ç—å InitData"
            onClick={() => {
              console.log('=== INIT DATA ===');
              console.log(JSON.stringify(initData, null, 2));
            }}
          />
          <ButtonCell
            title="–ü–æ–∫–∞–∑–∞—Ç—å Debug Info"
            onClick={() => {
              console.log('=== DEBUG INFO ===');
              console.log(JSON.stringify(debugInfo, null, 2));
            }}
          />
          <ButtonCell
            title="–¢–µ—Å—Ç API"
            onClick={async () => {
              try {
                const response = await fetch('/api/prepared-message-id?user_id=12345');
                const data = await response.json();
                console.log('API Test Result:', data);
                alert(`API Test: ${JSON.stringify(data)}`);
              } catch (error) {
                console.error('API Test Error:', error);
                alert(`API Test Error: ${error}`);
              }
            }}
          />
        </Section>
      </List>
    </Page>
  );
};