import asyncio
from contextlib import asynccontextmanager
from pathlib import Path
from typing import Optional

from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram import Router
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo, InlineQueryResultArticle, InputTextMessageContent
from aiogram.webhook.aiohttp_server import SimpleRequestHandler
from fastapi import FastAPI, Request, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import FileResponse, Response, JSONResponse
from starlette.responses import JSONResponse
from starlette.staticfiles import StaticFiles

from .config import settings


# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
print(f"[CONFIG] –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:\n{settings}")

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot = Bot(token=settings.bot_token)
dp = Dispatcher()
router = Router()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
prepared_messages = {}

async def create_prepared_message_for_user(user_id: int):
    """–°–æ–∑–¥–∞–µ—Ç —à–∞–±–ª–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –°–æ–∑–¥–∞–µ–º inline-—Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —à–∞–±–ª–æ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        inline_result = InlineQueryResultArticle(
            id=f"template_message_{user_id}",
            title="üöÄ –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ Mini App",
            description="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            input_message_content=InputTextMessageContent(
                message_text=" <b>–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ Mini App</b>\n\n"
                           " <b>–û—Ç:</b> {user_name}\n"
                           "üïê <b>–í—Ä–µ–º—è:</b> {timestamp}\n\n"
                           "üí¨ <b>–¢–µ–∫—Å—Ç:</b>\n{message_text}\n\n"
                           "‚ú® <i>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Telegram Mini App</i>",
                parse_mode="HTML"
            )
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await bot.save_prepared_inline_message(
            user_id=user_id,
            result=inline_result,
            allow_user_chats=True,
            allow_group_chats=True
        )
        
        prepared_messages[user_id] = result.id
        print(f"[OK] –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å ID: {result.id}")
        return result.id
        
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return None

@router.message(CommandStart())
async def on_start_command(message: types.Message):
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Mini App
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöÄ –û—Ç–∫—Ä—ã—Ç—å Mini App", web_app=WebAppInfo(url=f"{settings.app_base_url}:{settings.app_port}"))]
    ])
    
    await message.answer(
        " –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å Mini App.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å Mini App –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:",
        reply_markup=keyboard
    )


@router.message()
async def echo(message: types.Message):
    await message.answer(message.text or "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç. –ù–∞–ø–∏—à–∏—Ç–µ /start")


def build_public_webhook_url() -> str:
    base = (settings.app_base_url or "").rstrip("/")
    port = settings.bot_port
    if not base:
        return ""
    # –ï—Å–ª–∏ –ø–æ—Ä—Ç —É–∂–µ —É–∫–∞–∑–∞–Ω –≤ base ‚Äî –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º
    if base.startswith("http://") or base.startswith("https://"):
        hostpart = base.split("://", 1)[1]
        if ":" in hostpart:
            return f"{base}{settings.webhook_path}"
        # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ—Ä—Ç—ã
        if (base.startswith("https://") and port == 443) or (
            base.startswith("http://") and port == 80
        ):
            return f"{base}{settings.webhook_path}"
    return f"{base}:{port}{settings.webhook_path}"


@asynccontextmanager
async def lifespan(_: FastAPI):
    public_url = build_public_webhook_url()
    if public_url and not settings.skip_auto_webhook:
        last_error = None
        for attempt in range(1, 6):
            try:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É, –µ—Å–ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∂–µ URL
                try:
                    info = await bot.get_webhook_info()
                    if info.url == public_url:
                        print(f"[OK] Webhook —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {public_url}")
                        last_error = None
                        break
                except Exception:
                    pass
                await bot.set_webhook(
                    url=public_url,
                    secret_token=settings.secret_token,
                    drop_pending_updates=True,
                    allowed_updates=["message", "callback_query", "inline_query"],
                )
                print(
                    f"[OK] Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {public_url} (–ø–æ—Ä—Ç –±–æ—Ç–∞: {settings.bot_port}), –ø–æ–ø—ã—Ç–∫–∞ {attempt}"
                )
                last_error = None
                break
            except Exception as e:
                last_error = e
                wait_seconds = min(30, attempt * 2)
                print(f"[WARN] set_webhook failed (try {attempt}/5): {e}. Retry in {wait_seconds}s...")
                await asyncio.sleep(wait_seconds)
        if last_error:
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook –ø–æ—Å–ª–µ 5 –ø–æ–ø—ã—Ç–æ–∫: {last_error}")
    try:
        print("[OK] Bot –ø—Ä–æ—Ü–µ—Å—Å —Å—Ç–∞—Ä—Ç—É–µ—Ç. –û–∂–∏–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
        yield
    finally:
        await bot.delete_webhook(drop_pending_updates=True)
        await bot.session.close()


app = FastAPI(title="TelegramBot", lifespan=lifespan)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è Mini App
app.add_middleware(
    CORSMiddleware,
    allow_origins=[
        "https://leaalex.ru:3020",  # Mini App
        "https://leaalex.ru",       # –û—Å–Ω–æ–≤–Ω–æ–π –¥–æ–º–µ–Ω
        "http://localhost:3020",    # Dev —Ä–µ–∂–∏–º
        "http://localhost:3000",    # Dev —Ä–µ–∂–∏–º
    ],
    allow_credentials=True,
    allow_methods=["GET", "POST", "OPTIONS", "PUT", "DELETE"],
    allow_headers=[
        "Accept",
        "Accept-Language",
        "Content-Language",
        "Content-Type",
        "Authorization",
        "X-Requested-With",
        "X-User-ID",
        "X-Telegram-Bot-Api-Secret-Token",
    ],
)
dp.include_router(router)


@app.get("/healthz")
async def healthz():
    return {"status": "ok"}

@app.options("/api/prepared-message-id")
async def options_prepared_message_id():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ preflight –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è CORS"""
    return JSONResponse({"status": "ok"})


@app.get("/api/prepared-message-id")
async def get_prepared_message_id(request: Request):
    print(f"[DEBUG] Request: {request}")
    print(f"[DEBUG] Headers: {dict(request.headers)}")
    print(f"[DEBUG] Origin: {request.headers.get('origin')}")
    """API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
    user_id = request.headers.get("X-User-ID")
    if not user_id:
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        user_id = request.query_params.get("user_id")
    
    if not user_id:
        raise HTTPException(status_code=400, detail="User ID is required")
    
    try:
        user_id = int(user_id)
    except ValueError:
        raise HTTPException(status_code=400, detail="Invalid user ID format")
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∂–¥—ã–π —Ä–∞–∑
    message_id = await create_prepared_message_for_user(user_id)
    if not message_id:
        raise HTTPException(status_code=500, detail="Failed to create prepared message")

    print(f"[DEBUG] Prepared message ID for user {user_id}: {message_id}")
    
    return JSONResponse({
        "id": message_id,
        "status": "ready"
    })


@app.post(settings.webhook_path)
async def telegram_webhook(request: Request):
    # Validate Telegram secret token header if configured
    if settings.secret_token:
        header_token = request.headers.get("X-Telegram-Bot-Api-Secret-Token")
        if not header_token or header_token != settings.secret_token:
            print("[WARN] Invalid or missing secret token header")
            raise HTTPException(status_code=401, detail="Invalid secret token")
    update = await request.json()
    aiogram_update = types.Update.model_validate(update)
    print(f"[OK] Update received: {aiogram_update.event_type}")
    await dp.feed_update(bot, aiogram_update)
    return JSONResponse({"ok": True})


@app.post("/api/send-message")
async def send_message_from_mini_app(request: Request):
    """API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Mini App"""
    try:
        data = await request.json()
        user_id = data.get("user_id")
        message = data.get("message")
        username = data.get("username")
        first_name = data.get("first_name")
        
        if not user_id or not message:
            raise HTTPException(status_code=400, detail="Missing user_id or message")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞
        response_text = f"üì± <b>–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ Mini App:</b>\n\n"
        response_text += f"üë§ <b>–û—Ç:</b> {first_name or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}"
        if username:
            response_text += f" (@{username})"
        response_text += f"\n\nüí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n{message}"
        
        await bot.send_message(
            chat_id=user_id,
            text=response_text,
            parse_mode="HTML"
        )
        
        print(f"[OK] Message sent to user {user_id} from Mini App")
        return JSONResponse({"ok": True, "message": "Message sent successfully"})
        
    except Exception as e:
        print(f"[ERROR] Failed to send message from Mini App: {e}")
        raise HTTPException(status_code=500, detail="Failed to send message")


# No static here. Static is served by bot.server


def get_ssl_params() -> dict:
    ssl_params: dict[str, Optional[str]] = {}
    if settings.ssl_certfile and settings.ssl_keyfile:
        cert_path = Path(settings.ssl_certfile)
        key_path = Path(settings.ssl_keyfile)
        if cert_path.exists() and key_path.exists():
            ssl_params["ssl_certfile"] = str(cert_path)
            ssl_params["ssl_keyfile"] = str(key_path)
    return ssl_params

def run():
    import uvicorn

    uvicorn.run(
        "bot.main:app",
        host=settings.host,
        port=settings.bot_port,
        reload=False,
        **get_ssl_params(),
    )

if __name__ == "__main__":
    run()


